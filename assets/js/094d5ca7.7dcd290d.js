"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[127],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>m});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=r.createContext({}),c=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=c(e.components);return r.createElement(l.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},h=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),u=c(n),h=o,m=u["".concat(l,".").concat(h)]||u[h]||d[h]||a;return n?r.createElement(m,i(i({ref:t},p),{},{components:n})):r.createElement(m,i({ref:t},p))}));function m(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,i=new Array(a);i[0]=h;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[u]="string"==typeof e?e:o,i[1]=s;for(var c=2;c<a;c++)i[c]=n[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}h.displayName="MDXCreateElement"},1996:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>d,frontMatter:()=>a,metadata:()=>s,toc:()=>c});var r=n(7462),o=(n(7294),n(3905));const a={id:"receiving_messages",title:"Receiving Messages"},i="Receiving WhatsApp Messages",s={unversionedId:"receiving_messages",id:"receiving_messages",title:"Receiving Messages",description:"The SDK provides a convenience method for creating a web server to receive incoming Cloud API webhook notification payloads and creating your own custom logic. This web server currently uses a single process and is not intended for multi-instance environments. You can use the utlities to build your own or contribute to this open source project.",source:"@site/docs/receiving_messages.md",sourceDirName:".",slug:"/receiving_messages",permalink:"/receiving_messages",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/receiving_messages.md",tags:[],version:"current",frontMatter:{id:"receiving_messages",title:"Receiving Messages"},sidebar:"mainSidebar",previous:{title:"Quickstart",permalink:"/"},next:{title:"Project setup",permalink:"/project_setup"}},l={},c=[{value:"Prerequisites",id:"prerequisites",level:2},{value:"Configure",id:"configure",level:2},{value:"Code",id:"code",level:2},{value:"Anatomy",id:"anatomy",level:2},{value:"Run",id:"run",level:2},{value:"Setup",id:"setup",level:2},{value:"Receive",id:"receive",level:2}],p={toc:c},u="wrapper";function d(e){let{components:t,...n}=e;return(0,o.kt)(u,(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"receiving-whatsapp-messages"},"Receiving WhatsApp Messages"),(0,o.kt)("p",null,"The SDK provides a convenience method for creating a web server to receive incoming ",(0,o.kt)("a",{parentName:"p",href:"https://developers.facebook.com/docs/whatsapp/cloud-api/webhooks/components"},"Cloud API webhook notification")," payloads and creating your own custom logic. This web server currently uses a single process and is not intended for multi-instance environments. You can use the utlities to build your own or contribute to this open source project."),(0,o.kt)("h2",{id:"prerequisites"},"Prerequisites"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"Install ",(0,o.kt)("a",{parentName:"li",href:"https://nodejs.org/"},"Node.js")," version 16 or later."),(0,o.kt)("li",{parentName:"ol"},"A publicly accessible HTTPS (not HTTP) URL. For development, you can use tools such as ",(0,o.kt)("a",{parentName:"li",href:"https://ngrok.io/"},"Ngrok")," to route a tunnel to the listener port."),(0,o.kt)("li",{parentName:"ol"},"Have a working ",(0,o.kt)("a",{parentName:"li",href:"/"},"quickstart")," application.")),(0,o.kt)("h2",{id:"configure"},"Configure"),(0,o.kt)("p",null,"Open the ",(0,o.kt)("em",{parentName:"p"},".env")," file in the root directory, add the values for the following variables, and save after you're done:"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("strong",{parentName:"li"},"WEBHOOK_ENDPOINT")," - The listener path for your application. Recomend setting the environmental variable to ",(0,o.kt)("inlineCode",{parentName:"li"},"webhook"),"."),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("strong",{parentName:"li"},"WEBHOOK_VERIFICATION_TOKEN")," - This is a secret string that the Cloud API will send in it's subscribe message payload so you can verify it's a trusted source. Recommended you use a long string of alpha-numerics."),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("strong",{parentName:"li"},"LISTENER_PORT")," - The network port the application will listen on. Leaving this empty will set it to the default port 3000.")),(0,o.kt)("h2",{id:"code"},"Code"),(0,o.kt)("p",null,"Create a new file called ",(0,o.kt)("em",{parentName:"p"},"listen.js")," file and add the following code`:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'import { WhatsApp } from "./WhatsApp";\n\nconst wa = new WhatsApp();\n\nfunction custom_callback ( err, status_code, headers, body, resp )\n{\n    console.log(\n        `Incoming webhook status code: ${ status_code }\\n\\nHeaders:\n        ${ JSON.stringify( headers ) }\\n\\nBody: ${ JSON.stringify( body ) }`\n    );\n\n    if( resp )\n    {\n        resp.writeHead(200, { "Content-Type": "text/plain" });\n        resp.end();\n    }\n\n    if( err )\n    {\n        console.log( `ERROR: ${ err }` );\n    }\n}\n\nwa.webhooks.start( custom_callback );\n')),(0,o.kt)("h2",{id:"anatomy"},"Anatomy"),(0,o.kt)("p",null,"The code above has a custom callback function that receives an several parameters, including the response object to respond back to the Cloud API, and starts the webhook listener. From top to bottom:"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"Creates a new instance of the WhatsApp SDK class.\n2 . Logs the status code of the request, the headers received, and the request body. You should see it print a status code of ",(0,o.kt)("inlineCode",{parentName:"li"},"200"),"."),(0,o.kt)("li",{parentName:"ol"},"After checking for the response body, it sends a ",(0,o.kt)("inlineCode",{parentName:"li"},"200")," (sucess) back to the Cloud API for this request. This marks the message as delivered (not read) and the webhook service will not reattempt sending this message again."),(0,o.kt)("li",{parentName:"ol"},"Any errors are logged."),(0,o.kt)("li",{parentName:"ol"},"The webhooks listener is started. This accepts either a ",(0,o.kt)("strong",{parentName:"li"},"GET")," request or ",(0,o.kt)("strong",{parentName:"li"},"POST"),". Only post requests call the custom callback. GET requests are only for verifying subscription by the Cloud API.")),(0,o.kt)("h2",{id:"run"},"Run"),(0,o.kt)("p",null,"Run your application by putting in the following command into terminal:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"npm listen.js\n")),(0,o.kt)("p",null,"The application will start the HTTP server. It's ready to verify subscription from the Cloud API, and then receive incoming messages and call the callback function."),(0,o.kt)("h2",{id:"setup"},"Setup"),(0,o.kt)("p",null,"To have a valid HTTPS URL as required for this example, you can use a tool such as ",(0,o.kt)("a",{parentName:"p",href:"https://ngrok.io/"},"ngrok")," and tunnel requests from port 443 to the server listening port on 3000. To do this with ngrok, use the command ",(0,o.kt)("inlineCode",{parentName:"p"},"ngrok http 3000"),". You'll receive a URL that you can register with the Cloud API to register your webhooks."),(0,o.kt)("p",null,"To finish webhook registration, follow the official docs using the ",(0,o.kt)("strong",{parentName:"p"},"WEBHOOK_VERIFICATION_TOKEN")," string that you set in your ",(0,o.kt)("em",{parentName:"p"},".env")," file and the URL for your webhook. The listener address will be similar to ",(0,o.kt)("inlineCode",{parentName:"p"},"https://<<YOUR_SUBDOMAIN>>.ngrok.io/webhook")," (no trailing slash if set to just ",(0,o.kt)("inlineCode",{parentName:"p"},"webhook"),"). The server listens for the path set in the ",(0,o.kt)("strong",{parentName:"p"},"WEBHOOK_ENDPOINT")," environmental variable."),(0,o.kt)("h2",{id:"receive"},"Receive"),(0,o.kt)("p",null,"Use your WhatsApp app (e.g. mobile, desktop, web, etc.) and send a message to the test number. Shortly after the message is sent, you should see the details of the incoming webhook request printed in terminal."))}d.isMDXComponent=!0}}]);